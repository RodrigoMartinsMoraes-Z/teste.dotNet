// <auto-generated />
using Livraria.Context;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Livraria.Context.Migrations
{
    [DbContext(typeof(ContextoDeDados))]
    [Migration("20210105211343_BancoInicial")]
    partial class BancoInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Livraria.Domain.Livros.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Setor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Livros");
                });

            modelBuilder.Entity("Livraria.Domain.Livros.Tema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Temas");
                });

            modelBuilder.Entity("Livraria.Domain.ManyToMany.AutorLivro", b =>
                {
                    b.Property<int>("IdLivro")
                        .HasColumnType("int");

                    b.Property<int>("IdAutor")
                        .HasColumnType("int");

                    b.HasKey("IdLivro", "IdAutor");

                    b.HasIndex("IdAutor");

                    b.ToTable("AutoresLivros");
                });

            modelBuilder.Entity("Livraria.Domain.ManyToMany.LivroTema", b =>
                {
                    b.Property<int>("IdLivro")
                        .HasColumnType("int");

                    b.Property<int>("IdTema")
                        .HasColumnType("int");

                    b.HasKey("IdLivro", "IdTema");

                    b.HasIndex("IdTema");

                    b.ToTable("LivrosTemas");
                });

            modelBuilder.Entity("Livraria.Domain.Pessoas.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("Livraria.Domain.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Permissao")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoa");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasFilter("[Login] IS NOT NULL");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Livraria.Domain.ManyToMany.AutorLivro", b =>
                {
                    b.HasOne("Livraria.Domain.Pessoas.Pessoa", "Autor")
                        .WithMany("Livros")
                        .HasForeignKey("IdAutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Livraria.Domain.Livros.Livro", "Livro")
                        .WithMany("Autores")
                        .HasForeignKey("IdLivro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("Livraria.Domain.ManyToMany.LivroTema", b =>
                {
                    b.HasOne("Livraria.Domain.Livros.Livro", "Livro")
                        .WithMany("Temas")
                        .HasForeignKey("IdLivro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Livraria.Domain.Livros.Tema", "Tema")
                        .WithMany("Livros")
                        .HasForeignKey("IdTema")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livro");

                    b.Navigation("Tema");
                });

            modelBuilder.Entity("Livraria.Domain.Usuarios.Usuario", b =>
                {
                    b.HasOne("Livraria.Domain.Pessoas.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Livraria.Domain.Livros.Livro", b =>
                {
                    b.Navigation("Autores");

                    b.Navigation("Temas");
                });

            modelBuilder.Entity("Livraria.Domain.Livros.Tema", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("Livraria.Domain.Pessoas.Pessoa", b =>
                {
                    b.Navigation("Livros");
                });
#pragma warning restore 612, 618
        }
    }
}
